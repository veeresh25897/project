QUESTION 1:
#create a tuple
tuplex = 2, 4, 5, 6, 2, 3, 4, 4, 7 
print(tuplex)
#return the number of times it appears in the tuple.
count = tuplex.count(4)
print(count)

Question 2:
l = [(10, 20, 40), (40, 50, 60), (70, 80, 90)]
print([t[:-1] + (100,) for t in l])

Question 3:
d1 = {'a': 100, 'b': 200}
d2 = {'x': 300, 'y': 200}
d = d1.copy()
d.update(d2)
print(d)
 
Question 4:
dict1 = {'a': 12, 'for': 25, 'c': 9} 
dict2 = {'Geeks': 100, 'geek': 200, 'for': 300} 
  
  
# adding the values with common key 
for key in dict2: 
    if key in dict1: 
        dict2[key] = dict2[key] + dict1[key] 
    else: 
        pass
          
print(dict2)

Question 5:
def caught_speeding(speed, is_birthday):
    if is_birthday == True:
        if speed <= 65;
            return(no ticket)
        elif speed <= 66 && >=86:
            return(small ticket)
        else:
            return(big ticket)
    else:
        if speed <= 60:
            return(no ticket)
        elif speed <=61 && >=81:
            return((small ticket)
        else:
            return(big ticket)

Question 6:
def multiplyList(myList) : 
      
    # Multiply elements one by one 
    result = 1
    for x in myList: 
         result = result * x  
    return result  
      
# Driver code 
list1 = [1, 2, 3]  
list2 = [3, 2, 4] 
print(multiplyList(list1)) 
print(multiplyList(list2))

Question 7:
import random
test_list = [1, 4, 5, 6, 3] 
print ("The original list is : " + str(test_list)) 
for i in range(len(test_list)-1, 0, -1):  
    j = random.randint(0, i + 1)  
    test_list[i], test_list[j] = test_list[j], test_list[i]  
print ("The shuffled list is : " +  str(test_list))

Question 8:
range() and xrange() are two functions that could be used to iterate a certain number of times in for loops in Python. In Python 3, there is no xrange , but the range function behaves like xrange in Python 2.If you want to write code that will run on both Python 2 and Python 3, you should use range().

range() – This returns a list of numbers created using range() function.
xrange() – This function returns the generator object that can be used to display numbers only by looping. Only particular range is displayed on demand and hence called “lazy evaluation“.

Both are implemented in different ways and have different characteristics associated with them. The points of comparisons are:

Return Type
Memory
Operation Usage
Speed

Question 9:
error and 10

Question 10:
use of ** operator is--Exponent - left operand raised to the power of right
Program to print square of 5 is-- 

number = int (raw_input ("Enter an integer number: "))
square = number**2
print "Square of {0} is {1} ".format (number, square)



